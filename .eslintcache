[{"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\reportWebVitals.js":"1","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\App.js":"2","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\MapLibreMap.js":"3","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\index.js":"4","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\germany.js":"5"},{"size":362,"mtime":1607084317360,"results":"6","hashOfConfig":"7"},{"size":648,"mtime":1610103204483,"results":"8","hashOfConfig":"7"},{"size":14677,"mtime":1610112312211,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1607084317360,"results":"10","hashOfConfig":"7"},{"size":665738,"mtime":1610017666360,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2k0nx6",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\reportWebVitals.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\App.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\MapLibreMap.js",["23","24","25","26","27","28","29","30","31","32"],"import React from 'react';\r\nimport mapboxgl from 'maplibre-gl';\r\nimport '../node_modules/maplibre-gl/dist/mapbox-gl.css';\r\nimport germany from './germany';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport centroid from \"@turf/centroid\";\r\nimport buffer from \"@turf/buffer\";\r\nimport lineToPolygon from \"@turf/line-to-polygon\";\r\nimport { ReactComponent as WGLogo } from './wheregroup-logo-icon.svg';\r\nimport Popover from \"react-bootstrap/Popover\";\r\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Navbar  from \"react-bootstrap/Navbar\"\r\nimport Toast from \"react-bootstrap/Toast\"\r\nimport { BiPrinter, BiHomeHeart } from \"react-icons/bi\";\r\nimport { FiTwitter, FiGithub } from \"react-icons/fi\"\r\nimport { IconContext } from \"react-icons\";\r\nimport * as jsPDF from 'jspdf';\r\n\r\n\r\n\r\nexport default class MapLibreMap extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            lng: 8.6070,\r\n            lat: 53.1409349,\r\n            zoom: 8,\r\n            map: null,\r\n            value: '',\r\n            suggestions: [],\r\n            showMessage: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\r\n\r\n\r\n\r\n        const blank = {\r\n            \"version\": 8,\r\n            \"name\": \"Blank\",\r\n            \"center\": [0, 0],\r\n            \"zoom\": 0,\r\n            \"sources\": {},\r\n            //\"sprite\": window.location.origin + process.env.PUBLIC_URL + \"/sprites/osm-liberty\",\r\n            \"glyphs\": \"mapbox://fonts/openmaptiles/{fontstack}/{range}.pbf\",\r\n            \"layers\": [{\r\n                \"id\": \"background\",\r\n                \"type\": \"background\",\r\n                \"paint\": { \"background-color\": \"rgba(255,255,255,1)\" }\r\n            }],\r\n            \"id\": \"blank\"\r\n        }\r\n\r\n\r\n\r\n        const maxBounds = [[1.406250, 43.452919], [17.797852, 55.973798]]\r\n\r\n\r\n        const map = this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: blank,\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom,\r\n            maxBounds: maxBounds\r\n        });\r\n\r\n\r\n        map.on('move', () => {\r\n\r\n\r\n            this.setState({\r\n                lng: map.getCenter().lng.toFixed(4),\r\n                lat: map.getCenter().lat.toFixed(4),\r\n                zoom: map.getZoom().toFixed(2),\r\n            \r\n            });\r\n\r\n        });\r\n\r\n\r\n        map.on('load', () => {\r\n            map.addSource(\"wms-osm-source\", {\r\n                \"id\": \"wms-osm-source\",\r\n                \"type\": \"raster\",\r\n                \"tiles\": [\r\n                    'https://osm-demo.wheregroup.com/service?bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&STYLES=&request=GetMap&srs=EPSG:3857&transparent=false&width=256&height=256&layers=osm&tiled=true'\r\n                ],\r\n\r\n                \"tileSize\": 256\r\n            });\r\n         \r\n\r\n            map.addSource(\"point-radius\", {\r\n                \"type\": \"geojson\",\r\n                data: this.getEmptyFeatureCollection()\r\n\r\n            })\r\n            map.addSource(\"search\", {\r\n                \"type\": \"geojson\",\r\n                data: this.getEmptyFeatureCollection()\r\n\r\n            })\r\n\r\n            map.addLayer({\r\n                'id': 'wms-test-layer',\r\n                'type': 'raster',\r\n                'source': 'wms-osm-source',\r\n                'paint': {},\r\n                'layout': {\r\n                    'visibility': 'visible',\r\n                },\r\n            })\r\n\r\n           \r\n            map.addLayer({\r\n                'id': 'fill-radius-layer',\r\n                'type': 'fill',\r\n                'source': 'point-radius',\r\n                'paint': {\r\n\r\n                    'fill-color': '#007cbf',\r\n                    'fill-opacity': 0.5\r\n                },\r\n            })\r\n            map.addLayer({\r\n                'id': 'search-fill-layer',\r\n                'type': 'fill',\r\n                'source': 'search',\r\n                'paint': {\r\n\r\n                    'fill-color': 'red',\r\n                    'fill-opacity': 0.5\r\n                },\r\n            })\r\n            map.addLayer({\r\n                'id': 'search-point',\r\n                'type': 'circle',\r\n                'source': 'search',\r\n                'filter': ['==', '$type', 'Point'],\r\n                'paint': {\r\n\r\n                    'circle-color': 'red',\r\n                    'circle-opacity': 0.5,\r\n                    'circle-radius': 2,\r\n                },\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    getSuggestions = async value => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n        const languages = [];\r\n        if (inputLength < 3) return [];\r\n        const response = await fetch(`https://osm-search.wheregroup.com/search.php?q=${value}&polygon_geojson=1&format=json&extratags=1`, { method: \"GET\", });\r\n        const json = await response.json();\r\n        const result = json.filter((e,i,l)=>{\r\n            return e.extratags.linked_place !== \"state\"\r\n        })\r\n        return result.slice(0,5);\r\n\r\n    };\r\n\r\n    // When suggestion is clicked, Autosuggest needs to populate the input\r\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n    // input value for every given suggestion.\r\n    getSuggestionValue = suggestion => suggestion.display_name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    renderSuggestion = suggestion => (\r\n        <div>\r\n            {suggestion.display_name}\r\n        </div>\r\n    );\r\n    onChange = (event, { newValue }) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested = ({ value }) => {\r\n        this.getSuggestions(value).then(suggestions => {\r\n            this.setState({\r\n                suggestions: suggestions\r\n            });\r\n        })\r\n\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    onSuggestionSelected = (event, suggestion) => {\r\n        suggestion = suggestion.suggestion\r\n        this.setState({selected : suggestion.display_name90  })\r\n        const data = this.getEmptyFeatureCollection();\r\n        const sourceData = this.getEmptyFeatureCollection();;\r\n        const centroidFromSuggestion = centroid(suggestion.geojson);\r\n\r\n        const gjson = suggestion.geojson === \"LineString\" ? lineToPolygon(suggestion.geojson) : suggestion.geojson;\r\n        const circleFromSuggestion = buffer(gjson, 15, { steps: 36000 });\r\n        const origin = this.getEmptyFeature(suggestion.geojson.type, suggestion.geojson.coordinates);\r\n\r\n        data.features.push(...[circleFromSuggestion])\r\n        sourceData.features.push(...[origin])\r\n\r\n        this.map.getSource(\"point-radius\").setData(data);\r\n        this.map.getSource(\"search\").setData(sourceData);\r\n        this.map.flyTo({ center: centroidFromSuggestion.geometry.coordinates, essential: true });\r\n      \r\n    }\r\n\r\n    getEmptyFeatureCollection() {\r\n        return {\r\n            \"type\": \"FeatureCollection\",\r\n            \"features\": []\r\n        }\r\n    }\r\n    getEmptyFeature(type, coordinates) {\r\n        return {\r\n            \"type\": \"Feature\",\r\n            \"geometry\": {\r\n                \"type\": type,\r\n                \"coordinates\": coordinates\r\n            },\r\n            \"properties\": {\r\n                \"name\": null\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    print = () => {\r\n        if (!this.state.value) {\r\n            this.setState({\r\n               showMessage: true\r\n            \r\n            });\r\n\r\n            return false;\r\n        }\r\n        const width = 210\r\n        const height = 297\r\n        // Calculate pixel ratio\r\n        const actualPixelRatio = window.devicePixelRatio;\r\n\r\n        // Create map container\r\n        const hidden = document.createElement('div');\r\n        hidden.className = 'hidden-map';\r\n        document.body.appendChild(hidden);\r\n        const container = document.createElement('div');\r\n        container.style.width = this.toPixels(width);\r\n        container.style.height = this.toPixels(height);\r\n        hidden.appendChild(container);\r\n\r\n        //Render map\r\n        var renderMap = new mapboxgl.Map({\r\n            container: container,\r\n            center: this.map.getCenter(),\r\n            zoom: this.map.getZoom(),\r\n            bearing: this.map.getBearing(),\r\n            pitch: this.map.getPitch(),\r\n            interactive: false,\r\n            preserveDrawingBuffer: true,\r\n            fadeDuration: 0,\r\n            attributionControl: false\r\n        });\r\n        let style = this.map.getStyle();\r\n        for (let name in style.sources) {\r\n            let src = style.sources[name];\r\n            Object.keys(src).forEach(key => {\r\n                //delete properties if value is undefined.\r\n                // for instance, raster-dem might has undefined value in \"url\" and \"bounds\"\r\n                if (!src[key]) {\r\n                    delete src[key];\r\n                }\r\n            })\r\n        }\r\n        renderMap.setStyle(style)\r\n\r\n        renderMap.once('idle', function () {\r\n\r\n            // TO DO: It is still under development\r\n            const pdf = new jsPDF({\r\n                orientation: \"p\",\r\n                unit: \"mm\",\r\n                // format: [this_.width, this_.height],\r\n                compress: true\r\n            });\r\n            Object.defineProperty(window, 'devicePixelRatio', {\r\n                get: function () { return 300 / 96 }\r\n            });\r\n            const offsetX = 3;\r\n            const offsetY = 3;\r\n            pdf.addImage(renderMap.getCanvas().toDataURL('image/png'), 'png', 0, 0, 210, 297, null, 'FAST');\r\n            pdf.setFillColor('white')\r\n            pdf.rect(138, 287, 297, 10, \"F\")\r\n            pdf.setFontSize(10);// optional\r\n            pdf.text(\"Datenquelle: © OpenStreetMap-Mitwirkende\", 140, pdf.internal.pageSize.height - 3)\r\n            pdf.setFillColor('white')\r\n            pdf.rect(3, 3, 70, 13, \"F\")\r\n            pdf.setFontSize(10);// optional\r\n            pdf.text(\"covid19 Bewegungsradiusrechner (15km) \", 5, 6)\r\n            pdf.setFontSize(10);// optional\r\n            pdf.text(this.state.value.slice(0, 34), 5, 10)\r\n            pdf.setFontSize(10);// optional\r\n            pdf.text(\"made by wheregroup\", 5, 14)\r\n            pdf.setProperties({\r\n                title: \"covid19 Bewegungsradiusrechner (15km) \",\r\n                subject: \"covid19 Bewegungsradiusrechner (15km)\",\r\n                creator: 'WhereGroup GmBh',\r\n                author: '(c)Mapbox, (c)OpenStreetMap'\r\n            })\r\n            console.log(pdf.getFontList())\r\n            pdf.save('Bewegungsradiusrechner.pdf');\r\n\r\n\r\n            renderMap.remove();\r\n            hidden.parentNode?.removeChild(hidden);\r\n            Object.defineProperty(window, 'devicePixelRatio', {\r\n                get: function () { return actualPixelRatio }\r\n            });\r\n        }.bind(this));\r\n    }\r\n\r\n    toPixels(length) {\r\n        let conversionFactor = 96;\r\n\r\n        conversionFactor /= 25.4;\r\n\r\n        return conversionFactor * length + 'px';\r\n    }\r\n\r\n    render() {\r\n\r\n      const Message =  () =>( \r\n            <div\r\n                style={{\r\n                    position: 'relative',\r\n                    top: 0,\r\n                    right: 0,\r\n                    float: \"right\",\r\n                    \"padding-right\": \"3rem\"\r\n                }}\r\n            >\r\n                <Toast onClose={() => this.setState({showMessage : false})} show={this.state.showMessage} delay={3000} autohide>\r\n                    <Toast.Header>\r\n                        <strong className=\"mr-auto\">Hinweis</strong>\r\n                    </Toast.Header>\r\n                    <Toast.Body>Bitte suchen Sie zuerst nach einem Ort oder einer Adresse.</Toast.Body>\r\n                </Toast>\r\n               \r\n            </div>\r\n    )\r\n\r\n\r\n        const inputProps = {\r\n            value: this.state.value, // usually comes from the application state\r\n            onChange: this.onChange, // called every time the input value changes\r\n\r\n            type: \"search\",\r\n            placeholder: \"Adresse oder Stadt eingeben\"\r\n        };\r\n\r\n        const popover = (\r\n            <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h3\">made by <span>WhereGroup GmbH </span> </Popover.Title>\r\n                <Popover.Content>\r\n                    find us here: <br />\r\n                    <IconContext.Provider value={{ color: \"black\", size: \"2em\", className: \"whereToFind\" }}>\r\n                        <a href=\"https://wheregroup.com/\" target=\"_blank\"><BiHomeHeart value={{ size: \"2em\" }} /></a>\r\n                        <a href=\"https://github.com/WhereGroup\" target=\"_blank\"><FiGithub /></a>\r\n                        <a href=\"https://twitter.com/WhereGroup_com/\" target=\"_blank\"><FiTwitter /></a>\r\n                    </IconContext.Provider>\r\n                </Popover.Content>\r\n            </Popover>\r\n        );\r\n\r\n        const Info = () => (\r\n            <OverlayTrigger trigger=\"click\" placement=\"right\" overlay={popover}>\r\n                <Button variant=\"light\"><WGLogo width=\"1rem\" /></Button>\r\n            </OverlayTrigger>\r\n        );\r\n\r\n        return (<div>\r\n          \r\n            <Navbar  className=\"overlay navbar\">\r\n            <Message   />\r\n                <Autosuggest\r\n                    suggestions={this.state.suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={this.getSuggestionValue}\r\n                    onSuggestionSelected={this.onSuggestionSelected}\r\n                    renderSuggestion={this.renderSuggestion}\r\n                    inputProps={inputProps}\r\n                />\r\n                <Button variant=\"light\" onClick={this.print} ><BiPrinter></BiPrinter></Button>\r\n                <Info />\r\n\r\n\r\n            </Navbar >\r\n\r\n            <div className=\"footer\"> <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\"> © OpenStreetmap-Mitwirkende  </a> | <a href=\"https://wheregroup.com/impressum/\" target=\"_blank\"> Impressum </a> | <a href=\"https://wheregroup.com/datenschutz/\" target=\"_blank\">  Datenschutzerklärung </a>    </div>\r\n\r\n            <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n\r\n        </div >)\r\n    }\r\n}\r\n\r\n","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\index.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\germany.js",[],{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":15},{"ruleId":"33","severity":1,"message":"37","line":160,"column":15,"nodeType":"35","messageId":"36","endLine":160,"endColumn":24},{"ruleId":"33","severity":1,"message":"38","line":306,"column":19,"nodeType":"35","messageId":"36","endLine":306,"endColumn":26},{"ruleId":"33","severity":1,"message":"39","line":307,"column":19,"nodeType":"35","messageId":"36","endLine":307,"endColumn":26},{"ruleId":"40","severity":1,"message":"41","line":384,"column":59,"nodeType":"42","endLine":384,"endColumn":74},{"ruleId":"40","severity":1,"message":"41","line":385,"column":65,"nodeType":"42","endLine":385,"endColumn":80},{"ruleId":"40","severity":1,"message":"41","line":386,"column":71,"nodeType":"42","endLine":386,"endColumn":86},{"ruleId":"40","severity":1,"message":"41","line":417,"column":88,"nodeType":"42","endLine":417,"endColumn":103},{"ruleId":"40","severity":1,"message":"41","line":417,"column":185,"nodeType":"42","endLine":417,"endColumn":200},{"ruleId":"40","severity":1,"message":"41","line":417,"column":265,"nodeType":"42","endLine":417,"endColumn":280},"no-unused-vars","'germany' is defined but never used.","Identifier","unusedVar","'languages' is assigned a value but never used.","'offsetX' is assigned a value but never used.","'offsetY' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute"]