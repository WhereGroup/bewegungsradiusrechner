[{"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\reportWebVitals.js":"1","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\App.js":"2","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\MapLibreMap.js":"3","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\index.js":"4","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\germany.js":"5"},{"size":362,"mtime":1607084317360,"results":"6","hashOfConfig":"7"},{"size":223,"mtime":1610018154940,"results":"8","hashOfConfig":"7"},{"size":8561,"mtime":1610027406194,"results":"9","hashOfConfig":"7"},{"size":500,"mtime":1607084317360,"results":"10","hashOfConfig":"7"},{"size":665738,"mtime":1610017666360,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"2k0nx6",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\reportWebVitals.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\App.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\MapLibreMap.js",["23","24"],"import React from 'react';\r\nimport mapboxgl from 'maplibre-gl';\r\nimport '../node_modules/maplibre-gl/dist/mapbox-gl.css';\r\nimport germany from './germany';\r\nimport Autosuggest from 'react-autosuggest';\r\nimport circle from \"@turf/circle\";\r\nimport centroid from \"@turf/centroid\";\r\nimport buffer from \"@turf/buffer\";\r\nimport lineToPolygon from \"@turf/line-to-polygon\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default class MapLibreMap extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            lng: 8.6070,\r\n            lat: 53.1409349,\r\n            zoom: 8,\r\n            map: null,\r\n            value: '',\r\n            suggestions: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n\r\n\r\n\r\n\r\n        const blank = {\r\n            \"version\": 8,\r\n            \"name\": \"Blank\",\r\n            \"center\": [0, 0],\r\n            \"zoom\": 0,\r\n            \"sources\": {},\r\n            //\"sprite\": window.location.origin + process.env.PUBLIC_URL + \"/sprites/osm-liberty\",\r\n            \"glyphs\": \"mapbox://fonts/openmaptiles/{fontstack}/{range}.pbf\",\r\n            \"layers\": [{\r\n                \"id\": \"background\",\r\n                \"type\": \"background\",\r\n                \"paint\": { \"background-color\": \"rgba(255,255,255,1)\" }\r\n            }],\r\n            \"id\": \"blank\"\r\n        }\r\n\r\n\r\n\r\n        const maxBounds = [[1.406250, 43.452919], [17.797852, 55.973798]]\r\n\r\n\r\n        const map = this.map = new mapboxgl.Map({\r\n            container: this.mapContainer,\r\n            style: blank,\r\n            center: [this.state.lng, this.state.lat],\r\n            zoom: this.state.zoom,\r\n            maxBounds: maxBounds\r\n        });\r\n\r\n\r\n        map.on('move', () => {\r\n\r\n\r\n            this.setState({\r\n                lng: map.getCenter().lng.toFixed(4),\r\n                lat: map.getCenter().lat.toFixed(4),\r\n                zoom: map.getZoom().toFixed(2)\r\n            });\r\n\r\n        });\r\n\r\n\r\n        map.on('load', () => {\r\n            map.addSource(\"wms-osm-source\", {\r\n                \"id\": \"wms-osm-source\",\r\n                \"type\": \"raster\",\r\n                \"tiles\": [\r\n                    'https://osm-demo.wheregroup.com/service?bbox={bbox-epsg-3857}&format=image/png&service=WMS&version=1.1.1&STYLES=&request=GetMap&srs=EPSG:3857&transparent=false&width=256&height=256&layers=osm&tiled=true'\r\n                ],\r\n\r\n                \"tileSize\": 256\r\n            });\r\n            map.addSource(\"germany\", {\r\n                \"type\": \"geojson\",\r\n                \"data\": germany\r\n            })\r\n\r\n            map.addSource(\"point-radius\", {\r\n                \"type\": \"geojson\",\r\n                data: this.getEmptyFeatureCollection()\r\n\r\n            })\r\n            map.addSource(\"search\", {\r\n                \"type\": \"geojson\",\r\n                data: this.getEmptyFeatureCollection()\r\n\r\n            })\r\n\r\n            map.addLayer({\r\n                'id': 'wms-test-layer',\r\n                'type': 'raster',\r\n                'source': 'wms-osm-source',\r\n                'paint': {},\r\n                'layout': {\r\n                    'visibility': 'visible',\r\n                },\r\n            })\r\n\r\n            map.addLayer({\r\n                'id': 'germany-layer',\r\n                'type': 'line',\r\n                'source': 'germany', 'layout': {\r\n                    'line-join': 'round',\r\n                    'line-cap': 'round'\r\n                },\r\n\r\n                'paint': {\r\n                    'line-color': 'red',\r\n                    'line-opacity': 1,\r\n                    'line-width': 2,\r\n\r\n                }\r\n            })\r\n            map.addLayer({\r\n                'id': 'fill-radius-layer',\r\n                'type': 'fill',\r\n                'source': 'point-radius',\r\n                'paint': {\r\n\r\n                    'fill-color': '#007cbf',\r\n                    'fill-opacity': 0.5\r\n                },\r\n            })\r\n            map.addLayer({\r\n                'id': 'search-fill-layer',\r\n                'type': 'fill',\r\n                'source': 'search',\r\n                'paint': {\r\n\r\n                    'fill-color': 'red',\r\n                    'fill-opacity': 0.5\r\n                },\r\n            })\r\n            map.addLayer({\r\n                'id': 'search-point',\r\n                'type': 'circle',\r\n                'source': 'search',\r\n                'filter': ['==', '$type', 'Point'],\r\n                'paint': {\r\n\r\n                    'circle-color': 'red',\r\n                    'circle-opacity': 0.5,\r\n                    'circle-radius' : 2,\r\n                },\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    getSuggestions = async value => {\r\n        const inputValue = value.trim().toLowerCase();\r\n        const inputLength = inputValue.length;\r\n        const languages = [];\r\n        if(inputLength < 3) return [];\r\n        const response = await fetch(`http://osm-search.wheregroup.com/search.php?q=${value}&polygon_geojson=1&format=json`, { method: \"GET\", });\r\n        const json = await  response.json();\r\n        return json;\r\n        \r\n    };\r\n\r\n    // When suggestion is clicked, Autosuggest needs to populate the input\r\n    // based on the clicked suggestion. Teach Autosuggest how to calculate the\r\n    // input value for every given suggestion.\r\n    getSuggestionValue = suggestion => suggestion.display_name;\r\n\r\n    // Use your imagination to render suggestions.\r\n    renderSuggestion = suggestion => (\r\n        <div>\r\n            {suggestion.display_name}\r\n        </div>\r\n    );\r\n    onChange = (event, { newValue }) => {\r\n        this.setState({\r\n            value: newValue\r\n        });\r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to update suggestions.\r\n    // You already implemented this logic above, so just use it.\r\n    onSuggestionsFetchRequested =  ({ value }) => {\r\n        this.getSuggestions(value).then( suggestions => {\r\n            this.setState({\r\n                suggestions:  suggestions\r\n            });\r\n        })\r\n       \r\n    };\r\n\r\n    // Autosuggest will call this function every time you need to clear suggestions.\r\n    onSuggestionsClearRequested = () => {\r\n        this.setState({\r\n            suggestions: []\r\n        });\r\n    };\r\n\r\n    onSuggestionSelected = (event, suggestion)=>{\r\n        suggestion = suggestion.suggestion\r\n        const data = this.getEmptyFeatureCollection();\r\n        const sourceData = this.getEmptyFeatureCollection(); ;\r\n        const centroidFromSuggestion =  centroid(suggestion.geojson);\r\n        \r\n        const gjson = suggestion.geojson === \"LineString\" ? lineToPolygon(suggestion.geojson) : suggestion.geojson;\r\n        const circleFromSuggestion = buffer(gjson, 15,{steps : 36000});\r\n        const origin = this.getEmptyFeature(suggestion.geojson.type,suggestion.geojson.coordinates);\r\n        \r\n        data.features.push(...[circleFromSuggestion])\r\n        sourceData.features.push(...[origin])\r\n       \r\n        this.map.getSource(\"point-radius\").setData(data);\r\n        this.map.getSource(\"search\").setData(sourceData);\r\n        this.map.flyTo({ center: centroidFromSuggestion.geometry.coordinates,essential: true } );\r\n    }\r\n\r\n    getEmptyFeatureCollection() {\r\n        return {\r\n            \"type\": \"FeatureCollection\",\r\n            \"features\": []\r\n        }\r\n    }\r\n    getEmptyFeature(type,coordinates) {\r\n        return {\r\n            \"type\": \"Feature\",\r\n            \"geometry\": {\r\n                \"type\": type,\r\n                \"coordinates\": coordinates\r\n            },\r\n            \"properties\": {\r\n                \"name\": null\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const inputProps = {\r\n            value: this.state.value, // usually comes from the application state\r\n            onChange: this.onChange, // called every time the input value changes\r\n\r\n            type: \"search\",\r\n            placeholder: \"Enter city or postcode\"\r\n        };\r\n        return (<div>\r\n            <div className=\"overlay\">\r\n                <Autosuggest\r\n                    suggestions={this.state.suggestions}\r\n                    onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\r\n                    onSuggestionsClearRequested={this.onSuggestionsClearRequested}\r\n                    getSuggestionValue={this.getSuggestionValue}\r\n                    onSuggestionSelected={this.onSuggestionSelected}\r\n                    renderSuggestion={this.renderSuggestion}\r\n                    inputProps={inputProps}\r\n                />\r\n            </div>\r\n\r\n\r\n            <div ref={el => this.mapContainer = el} className=\"mapContainer\" />\r\n\r\n        </div >)\r\n    }\r\n}\r\n\r\n","C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\index.js",[],"C:\\Users\\matsi\\Softwareprojekte\\cvoidradiuschecker\\src\\germany.js",[],{"ruleId":"25","severity":1,"message":"26","line":6,"column":8,"nodeType":"27","messageId":"28","endLine":6,"endColumn":14},{"ruleId":"25","severity":1,"message":"29","line":169,"column":15,"nodeType":"27","messageId":"28","endLine":169,"endColumn":24},"no-unused-vars","'circle' is defined but never used.","Identifier","unusedVar","'languages' is assigned a value but never used."]